// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`converts Swift language 1`] = `
"import Foundation

#if canImport(UIKit)
  import UIKit
#elseif canImport(AppKit)
  import AppKit
#endif

public indirect enum AccessLevelModifier: Codable {
  case privateModifier
  case fileprivateModifier
  case internalModifier
  case publicModifier
  case openModifier
  indirect enum CodingKeys: CodingKey {
    case type
  }
  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
    let type = try container.decode(String.self, forKey: CodingKeys.type)
    switch type {
      case \\"privateModifier\\":
        self = AccessLevelModifier.privateModifier
      case \\"fileprivateModifier\\":
        self = AccessLevelModifier.fileprivateModifier
      case \\"internalModifier\\":
        self = AccessLevelModifier.internalModifier
      case \\"publicModifier\\":
        self = AccessLevelModifier.publicModifier
      case \\"openModifier\\":
        self = AccessLevelModifier.openModifier
      default:
        fatalError(\\"Problem decoding\\")
    }
  }
  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    switch self {
      case AccessLevelModifier.privateModifier:
        try container.encode(\\"privateModifier\\", forKey: CodingKeys.type)
      case AccessLevelModifier.fileprivateModifier:
        try container.encode(\\"fileprivateModifier\\", forKey: CodingKeys.type)
      case AccessLevelModifier.internalModifier:
        try container.encode(\\"internalModifier\\", forKey: CodingKeys.type)
      case AccessLevelModifier.publicModifier:
        try container.encode(\\"publicModifier\\", forKey: CodingKeys.type)
      case AccessLevelModifier.openModifier:
        try container.encode(\\"openModifier\\", forKey: CodingKeys.type)
    }
  }
}
public indirect enum MutationModifier {
  case mutatingModifier
  case nonmutatingModifier
}
public indirect enum OtherModifier {
  case classModifier
  case convenienceModifier
  case dynamicModifier
  case finalModifier
  case infixModifier
  case lazyModifier
  case optionalModifier
  case overrideModifier
  case postfixModifier
  case prefixModifier
  case requiredModifier
  case staticModifier
  case unownedModifier
  case unownedSafeModifier
  case unownedUnsafeModifier
  case weakModifier
}
public indirect enum Literal {
  case nil
  case boolean(Bool)
  case integer(CGFloat)
  case floatingPoint(CGFloat)
  case string(String)
  case color(String)
  case image(String)
  case array(Array<Literal>)
}
"
`;
