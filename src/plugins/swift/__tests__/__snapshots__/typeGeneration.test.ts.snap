// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`converts Swift language 1`] = `
"import Foundation

#if canImport(UIKit)
  import UIKit
#elseif canImport(AppKit)
  import AppKit
#endif

public indirect enum AccessLevelModifier: Codable {
  case privateModifier
  case publicModifier
  fileprivate enum _AccessLevelModifierType: String, Codable {
    case privateModifier
    case publicModifier
  }
  fileprivate struct _TypeContainer: Codable {
    let type: _AccessLevelModifierType
  }
  fileprivate struct _PrivateModifier: Codable {
    let type: _AccessLevelModifierType
  }
  fileprivate struct _PublicModifier: Codable {
    let type: _AccessLevelModifierType
  }
  public init(from decoder: Decoder) throws {
    let container = try decoder.singleValueContainer()
    switch try container.decode(_TypeContainer.self).type {
      case _AccessLevelModifierType.privateModifier:
        self = AccessLevelModifier.privateModifier
      case _AccessLevelModifierType.publicModifier:
        self = AccessLevelModifier.publicModifier
    }
  }
  public func encode(to encoder: Encoder) throws {
    var container = encoder.singleValueContainer()
    switch self {
      case AccessLevelModifier.privateModifier:
        try container.encode(_PrivateModifier(type: _AccessLevelModifierType.privateModifier))
      case AccessLevelModifier.publicModifier:
        try container.encode(_PublicModifier(type: _AccessLevelModifierType.publicModifier))
    }
  }
}
public indirect enum Literal: Codable {
  case \`nil\`
  case floatingPoint(CGFloat)
  case array(Array<Literal>)
  fileprivate enum _LiteralType: String, Codable {
    case \`nil\`
    case floatingPoint
    case array
  }
  fileprivate struct _TypeContainer: Codable {
    let type: _LiteralType
  }
  fileprivate struct _Nil: Codable {
    let type: _LiteralType
  }
  fileprivate struct _FloatingPoint: Codable {
    let type: _LiteralType
    let value: CGFloat
  }
  fileprivate struct _Array: Codable {
    let type: _LiteralType
    let value: Array<Literal>
  }
  public init(from decoder: Decoder) throws {
    let container = try decoder.singleValueContainer()
    switch try container.decode(_TypeContainer.self).type {
      case _LiteralType.nil:
        self = Literal.nil
      case _LiteralType.floatingPoint:
        let decoded = try container.decode(_FloatingPoint.self)
        self = Literal.floatingPoint(decoded.value)
      case _LiteralType.array:
        let decoded = try container.decode(_Array.self)
        self = Literal.array(decoded.value)
    }
  }
  public func encode(to encoder: Encoder) throws {
    var container = encoder.singleValueContainer()
    switch self {
      case Literal.nil:
        try container.encode(_Nil(type: _LiteralType.nil))
      case Literal.floatingPoint(let value):
        try container.encode(_FloatingPoint(type: _LiteralType.floatingPoint, value: value))
      case Literal.array(let value):
        try container.encode(_Array(type: _LiteralType.array, value: value))
    }
  }
}
public struct Identifier: Codable, Equatable {
  public init(id: String = \\"\\", name: String = \\"\\") {
    self.id = id
    self.name = name
  }
  public let id: String
  public let name: String
}
public indirect enum Declaration: Codable {
  case functionDeclaration(name: String, parameters: Array<String>)
  fileprivate enum _DeclarationType: String, Codable {
    case functionDeclaration
  }
  fileprivate struct _TypeContainer: Codable {
    let type: _DeclarationType
  }
  fileprivate struct _FunctionDeclaration: Codable {
    let type: _DeclarationType
    let value0: String
    let value1: Array<String>
  }
  public init(from decoder: Decoder) throws {
    let container = try decoder.singleValueContainer()
    switch try container.decode(_TypeContainer.self).type {
      case _DeclarationType.functionDeclaration:
        let decoded = try container.decode(_FunctionDeclaration.self)
        self = Declaration.functionDeclaration(name: decoded.value0, parameters: decoded.value1)
    }
  }
  public func encode(to encoder: Encoder) throws {
    var container = encoder.singleValueContainer()
    switch self {
      case Declaration.functionDeclaration(let value0, let value1):
        try container
          .encode(_FunctionDeclaration(type: _DeclarationType.functionDeclaration, value0: value0, value1: value1))
    }
  }
}
public struct ExistingType: Codable, Equatable {
  public init(id: UUID = UUID()) {
    self.id = id
  }
  public let id: UUID
}

"
`;
